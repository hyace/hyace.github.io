<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hyace]]></title>
  <link href="http://hyace.github.io/atom.xml" rel="self"/>
  <link href="http://hyace.github.io/"/>
  <updated>2014-12-15T20:18:54+08:00</updated>
  <id>http://hyace.github.io/</id>
  <author>
    <name><![CDATA[Hyace]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[阿里数据库中间件Cobar环境搭建]]></title>
    <link href="http://hyace.github.io/blog/2014/12/15/a-li-shu-ju-ku-zhong-jian-jian-cobarhuan-jing-da-jian/"/>
    <updated>2014-12-15T20:13:39+08:00</updated>
    <id>http://hyace.github.io/blog/2014/12/15/a-li-shu-ju-ku-zhong-jian-jian-cobarhuan-jing-da-jian</id>
    <content type="html"><![CDATA[<p>装了CentOS7，结果死活连不上网，一直提示没有可用的网络设备，没工夫处理，以后再说，先用之前装好的CentOS6.4，Mysql安装包又下不下来，只好翻出了之前玩Storm装的Archlinux，总共有Alpha、Beta、Delta三台虚机，里头安装了JDK、MariaDB等等。</p>

<h3>准备</h3>

<p>测试中有一个schema，两张表tb1、tb2，其中tb1在一个库，tb2分为两个库。
<img src="http://images.cnitblog.com/blog/316027/201412/022342064987985.jpg" alt="" /></p>

<p>几个Cobar的<a href="https://github.com/alibaba/cobar/wiki">release</a>包都先下载好。</p>

<p>数据准备，三个数据库表都建好：</p>

<pre><code>#创建dbtest1
drop database if exists dbtest1;
create database dbtest1;
use dbtest1;
#在dbtest1上创建tb1
create table tb1(
id int not null,
gmt datetime);
#创建dbtest2
drop database if exists dbtest2;
create database dbtest2;
use dbtest2;
#在dbtest2上创建tb2
create table tb2(
id int not null,
val varchar(256));
#创建dbtest3
drop database if exists dbtest3;
create database dbtest3;
use dbtest3;
#在dbtest3上创建tb2
create table tb2(
id int not null,
val varchar(256));
</code></pre>

<h4>注意系统的JAVA_HOME要配置好</h4>

<h3>配置</h3>

<p>Cober的server目录下的conf中的是配置文件</p>

<p>schema.xml中需要修改三个数据库的ip和端口，账号和密码。</p>

<p>server.xml中需要修改Cobar的账号和密码。</p>

<h3>启动</h3>

<p>通过运行bin目录下的startup.bat来启动Cobar服务，</p>

<p>第一遍没起来，打开startup.bat,其中的<code>APP_VERSION</code>版本和release中的server版本不匹配，log4j的版本也不匹配，修改之后才能正确运行。</p>

<p>logs目录下有Cobar运行的log文件，<code>stdout.log</code>是服务运行的日志，正确运行时是这样：</p>

<pre><code>23:13:00,876 INFO  ===============================================
23:13:00,876 INFO  Cobar is ready to startup ...
23:13:00,876 INFO  Startup processors ...
23:13:00,969 INFO  Startup connector ...
23:13:00,969 INFO  Initialize dataNodes ...
23:13:01,047 INFO  dnTest1:0 init success
23:13:01,063 INFO  dnTest3:0 init success
23:13:01,063 INFO  dnTest2:0 init success
23:13:01,063 INFO  CobarManager is started and listening on 9066
23:13:01,079 INFO  CobarServer is started and listening on 8066
23:13:01,079 INFO  ===============================================
</code></pre>

<h3>测试</h3>

<p>访问Cobar可以和访问Mysql一样的方式：</p>

<pre><code>&gt;mysql -utest -ptest -P8066 -Ddbtest
</code></pre>

<p><img src="http://images.cnitblog.com/blog/316027/201412/030015092332882.jpg" alt="" /></p>

<p>三个库看起来是在一个库，成功~</p>

<h3>再实验在Arch下跑Cobar</h3>

<p>　　大部分步骤和Windows下一样，不同的是startup的启动，Linux下运行的是startup.sh。
　　先是报错：<code>JAVA_HOME environment variable is not set.</code>，但是我的JAVA_HOME已经设定了，虽然用的是openJDK，再查看到有人说JAVA_HOME不应该指向jre，但是openJDK下的java就是软链到jre的，所以把启动脚本中的<code>if [ ! -e "$JAVA_HOME/bin/java" ]</code>注释了。</p>

<p>　　运行后又失败，没有报错，查看<code>../logs/console.log</code>：</p>

<pre><code>  1 OpenJDK Server VM warning: INFO: os::commit_memory(0x7b000000, 805306368, 0) failed; error='Cannot allocate memory' (errno=12)
  2 #
  3 # There is insufficient memory for the Java Runtime Environment to continue.
  4 # Native memory allocation (malloc) failed to allocate 805306368 bytes for committing reserved memory.
  5 # An error report file with more information is saved as:
  6 # /home/software/cobar-server-1.2.7/hs_err_pid623.log
</code></pre>

<p>原来是虚拟机内存不够分配，因为装Arch的时候为了多运行几个，每个只分配了256M内存，而startup.sh中配置如下：</p>

<pre><code>JAVA_OPTS="-server -Xms1024m -Xmx1024m -Xmn256m -Xss256k"
</code></pre>

<p>堆内存分了1G，新生代占了整个Arch内存大小，线程栈256k。将参数修改后可以运行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Archlinux 中使用Mysql]]></title>
    <link href="http://hyace.github.io/blog/2014/12/07/archlinux-zhong-shi-yong-mysql/"/>
    <updated>2014-12-07T09:51:44+08:00</updated>
    <id>http://hyace.github.io/blog/2014/12/07/archlinux-zhong-shi-yong-mysql</id>
    <content type="html"><![CDATA[<p>Archlinux中的官方源用的是MariaDB，现在随着人们对Oracle把控Mysql的不信任，更多人开始用MariaDB。</p>

<h3>设置</h3>

<p>　　安装很简单，用<code>pacman</code>就行，其中的初始设置步骤如下：</p>

<pre><code># systemctl start mysqld  
# mysql_secure_installation  
# systemctl restart mysqld  
</code></pre>

<p>　　其中的第二步可以设置或修改密码。如果还需要后续的修改可以在<code>/etc/mysql/my.cnf</code>中配置，比如添加<code>skip-networking</code>可以实现禁止网络访问。</p>

<h3>设置远程</h3>

<p>　　在上步设置中设置了允许远程连接，但是账户还需配置，先进入MariaDB，执行命令：</p>

<pre><code>MariaDB [(none)]&gt; grant all privileges on *.* to 'root'@'192.168.125.%' identified by 'q' with grant option;
</code></pre>

<p>　　其中root是远程连接用的账户名，q为密码，&#8217;%&lsquo;表示通配。</p>

<p>　　需要的话可以设置mysql守护进程开机启动：<code>sudo systemctl enable mysqld</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thrift的安装以及问题]]></title>
    <link href="http://hyace.github.io/blog/2014/08/27/thriftde-an-zhuang-yi-ji-wen-ti/"/>
    <updated>2014-08-27T13:33:42+08:00</updated>
    <id>http://hyace.github.io/blog/2014/08/27/thriftde-an-zhuang-yi-ji-wen-ti</id>
    <content type="html"><![CDATA[<p>对Thrift这个框架知之甚少，想先了解下，我自己的习惯是先安装好跑个小demo。<br/>
   首先从<a href="http://incubator.apache.org/thrift/download/">这里下载</a>到Thrift的包。<br/>
   Thrift对于安装环境的要求是Unix/Linux系统，Windows要装需要配合cygwin。<br/>
   解压安装包，进入，运行：</p>

<pre><code>./configure  
make  
make install  
</code></pre>

<p>   大体步骤是这样，但是中间遇到了很多问题。最主要的一个是在make的时候，运<br/>
   行ruby的bunble这一步出错，显示如下：</p>

<pre><code>Bundler could not find compatible versions for gem "bundler":
  In Gemfile:
      bundler (~&gt; 1.3.1) ruby

    Current Bundler version:
      bundler (1.7.2)

This Gemfile requires a different version of Bundler.
Perhaps you need to update Bundler by running `gem install bundler`?  
</code></pre>

<p>   Stackoverflow上的答案是<a href="http://stackoverflow.com/questions/12092928/how-to-bundle-install-when-your-gemfile-requires-an-older-version-of-bundler">这样</a>：</p>

<pre><code>% gem install bundler -v '~&gt; 1.0.0'
Successfully installed bundler-1.0.22
Then force rubygems to use the version you want (see this post):

% bundle _1.0.22_ install  
</code></pre>

<p>   这个也是版本不对，只不过不是1.3.1的，但是执行了始终不对。装了1.3.1的<br/>
bundler但是默认识别的还是1.7.2的，于是用gem把高版本的删了，接着make才成<br/>
功，之后有装回来了。<br/>
   ps：寻找答案过程中才知道墙内有个网站叫<a href="http://segmentfault.com/">segmentfault</a>,还有个网站叫<br/>
<a href="http://outofmemory.cn/">outofmemory</a>，方知山寨之伟大～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu下安装Sublime3的Markdown插件]]></title>
    <link href="http://hyace.github.io/blog/2014/08/27/ubuntuxia-an-zhuang-sublime3de-markdowncha-jian/"/>
    <updated>2014-08-27T01:04:21+08:00</updated>
    <id>http://hyace.github.io/blog/2014/08/27/ubuntuxia-an-zhuang-sublime3de-markdowncha-jian</id>
    <content type="html"><![CDATA[<hr />

<p>   开始打算用vim编辑markdown文件的，搜了下各种解决方案，也尝试了很久，<br/>
但还是不行，比如vim-instant-markdown(<a href="https://github.com/hyace/vim-instant-markdown">git</a>)，按照要求的各种依赖也都<br/>
安装了，但是用vim打开md文件还是悄然无声。
    据说Sublime也可以支持markdown，所以就在Ubuntu下安装了一个Sublime3.<br/>
之后就可以安装markdown插件了。<br/>
    按ctrl+～，输入命令：</p>

<pre><code>import urllib.request,os; pf = 'Package Control.sublime-package';  
ipp = sublime.installed_packages_path();  
urllib.request.install_opener( urllib.request.build_opener(    \
urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf),  \
'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/'\
+ pf.replace(' ','%20')).read())  
</code></pre>

<p>   之后可以安ctrl+shift+p，输入命令：</p>

<pre><code>package, 选择install package  
markdown, 选择markdown preview  
</code></pre>

<p>重启sublime，打开一个md文件，输入命令：</p>

<pre><code>markdown preview， 选择 preview in browser  
</code></pre>

<p>这样就可以预览了，但是不是实时的。</p>

<hr />

<p>ps: 刚刚在编辑post的时候是用vim编辑的，结果久等的实时窗口终于来了。原来<br/>
它识别的是markdown后缀，而不是md后缀。
pss: 话说这个主题和配色好丑啊，有空了再弄吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Blood]]></title>
    <link href="http://hyace.github.io/blog/2014/08/26/first-blood/"/>
    <updated>2014-08-26T00:07:11+08:00</updated>
    <id>http://hyace.github.io/blog/2014/08/26/first-blood</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
